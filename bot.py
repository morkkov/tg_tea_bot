from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
import asyncio
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import openpyxl
import os
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.state import State, StatesGroup

from dotenv import load_dotenv
load_dotenv()
import os

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "935773354"))

if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")


class OrderForm(StatesGroup):
    fill_address = State()


class DeliveryInfo(StatesGroup):
    choosing_delivery = State()
    entering_data = State()


class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

cart = {}
# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
users = set()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def save_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    print(f"–°–æ—Ö—Ä–∞–Ω—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª: {users}")
    with open("users.txt", "w", encoding="utf-8") as f:
        for user_id in users:
            f.write(f"{user_id}\n")

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("users.txt", "r", encoding="utf-8") as f:
            for line in f:
                user_id = line.strip()
                if user_id.isdigit():
                    users.add(int(user_id))
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {len(users)}")
    except FileNotFoundError:
        print("–§–∞–π–ª users.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        pass  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_users()

from aiogram.fsm.state import State, StatesGroup

class OrderStates(StatesGroup):
    entering_info = State()
    confirming_order = State()
    choosing_delivery = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
def load_catalog():
    wb = openpyxl.load_workbook("tea_catalog.xlsx")
    ws = wb.active
    items = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        item = {
            'id': row[0],
            'name': row[1],
            'desc': row[2],
            'photo': row[3],
            'price_100g': row[4],
            'cost_100g': row[5]
        }
        items.append(item)
    return items


import os
import openpyxl
from datetime import datetime

def save_order_to_excel(user_id, items, user_data):
    file_name = "orders.xlsx"
    file_exists = os.path.exists(file_name)

    if not file_exists:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["ID", "–¢–æ–≤–∞—Ä—ã", "–°—É–º–º–∞", "–ü—Ä–∏–±—ã–ª—å", "–í—Ä–µ–º—è", "–û–ø–ª–∞—á–µ–Ω", "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤"])
    else:
        wb = openpyxl.load_workbook(file_name)
        ws = wb.active

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    names = ", ".join([f"{item['name']} ({item['weight']}–≥)" for item in items])
    total = sum(item['price'] for item in items)
    profit = sum(item['profit'] for item in items)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    items_details = []
    for item in items:
        items_details.append(f"{item['name']} - {item['weight']}–≥ - {item['price']:.2f}‚ÇΩ")
    items_details_str = "\n".join(items_details)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = (
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {user_data.get('delivery')}\n"
        f"–û–ø–ª–∞—Ç–∞: {user_data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–∞–Ω–Ω—ã–µ: {user_data.get('buyerdata')}\n"
        f"–ù–∏–∫: @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    ws.append([
        user_id,           # A - ID
        names,             # B - –¢–æ–≤–∞—Ä—ã (–∫—Ä–∞—Ç–∫–æ)
        round(total, 2),   # C - –°—É–º–º–∞
        round(profit, 2),  # D - –ü—Ä–∏–±—ã–ª—å
        timestamp,         # E - –í—Ä–µ–º—è
        "–ù–µ—Ç",             # F - –û–ø–ª–∞—á–µ–Ω
        user_info,         # G - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        items_details_str  # H - –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
    ])

    wb.save(file_name)



@dp.message()
async def handle_all_messages(message: types.Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    print(f"=== –û–ë–†–ê–ë–û–¢–ß–ò–ö handle_all_messages ===")
    print(f"–¢–µ–∫—Å—Ç: {text}")
    print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    print(f"–û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {DeliveryInfo.entering_data}")

    if current_state == OrderStates.entering_info:
        return
    if current_state == DeliveryInfo.entering_data:
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –í—ã–∑—ã–≤–∞–µ–º save_delivery_info")
        await save_delivery_info(message, state)
        return
    if current_state == AdminStates.waiting_for_broadcast_message:
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ AdminStates.waiting_for_broadcast_message - –ø–µ—Ä–µ–¥–∞–µ–º –≤ handle_broadcast_message")
        await handle_broadcast_message(message, state)
        return
        
    if text == "/start":
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        users.add(user_id)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        save_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        
        kb = ReplyKeyboardBuilder()
        kb.add(types.KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"))
        kb.add(types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
        kb.add(types.KeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"))
        if user_id == ADMIN_ID:
            kb.add(types.KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
        kb.adjust(2)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞–π–Ω—ã–π –±–æ—Ç!", reply_markup=kb.as_markup(resize_keyboard=True))

    elif text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
        catalog = load_catalog()
        for item in catalog:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="25–≥", callback_data=f"add_{item['id']}_25"),
                    InlineKeyboardButton(text="50–≥", callback_data=f"add_{item['id']}_50")
                ],
                [
                    InlineKeyboardButton(text="100–≥", callback_data=f"add_{item['id']}_100"),
                    InlineKeyboardButton(text="200–≥", callback_data=f"add_{item['id']}_200")
                ]
            ])
            await message.answer_photo(
                photo=item['photo'],
                caption=f"<b>{item['name']}</b>\n\n{item['desc']}\n\nüíµ –¶–µ–Ω–∞: {item['price_100g']}‚ÇΩ / 100–≥",
                reply_markup=kb
            )

    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        items = cart.get(user_id, [])
        if not items:
            return await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        text_cart = "üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        for i, item in enumerate(items, 1):
            text_cart += f"{i}. {item['name']} ‚Äî {item['weight']}–≥ ‚Äî {item['price']:.2f}‚ÇΩ\n"
            total += item['price']
        text_cart += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:.2f}‚ÇΩ"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
        ])
        await message.answer(text_cart, reply_markup=kb)

        

    elif text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user_id == ADMIN_ID:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        admin_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–∫–∞–∑—ã")],
                [KeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Å–µ–º")],
                [KeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
            reply_markup=admin_kb
        )

    elif text == "–ó–∞–∫–∞–∑—ã" and user_id == ADMIN_ID:
        if not cart:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text_orders = "–í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for uid, items in cart.items():
                text_orders += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}:\n"
                for i, item in enumerate(items, 1):
                    text_orders += f"  {i}. {item['name']} ‚Äî {item['weight']}–≥ ‚Äî {item['price']:.2f}‚ÇΩ\n"
                text_orders += "\n"
            await message.answer(text_orders)

    elif text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Å–µ–º" and user_id == ADMIN_ID:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
        )
        await state.set_state(AdminStates.waiting_for_broadcast_message)

    elif text == "üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞" and user_id == ADMIN_ID:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await message.answer("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            await message.answer(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}\n"
                f"üÜî –í–∞—à ID: {user_id}\n"
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {list(users)[:5]}{'...' if len(users) > 5 else ''}"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    elif text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ @jdueje")

    elif text == "–ù–∞–∑–∞–¥":
        kb = ReplyKeyboardBuilder()
        kb.add(types.KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"))
        kb.add(types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
        kb.add(types.KeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"))
        if user_id == ADMIN_ID:
            kb.add(types.KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
        kb.adjust(2)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup(resize_keyboard=True))




@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    try:
        _, tea_id_str, weight_str = callback.data.split("_")
        tea_id = int(tea_id_str)
        weight = int(weight_str)
    except:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")

    user_id = callback.from_user.id
    catalog = load_catalog()
    tea = next((item for item in catalog if item['id'] == tea_id), None)
    if not tea:
        return await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    price = (tea['price_100g'] / 100) * weight
    profit = price - ((tea['cost_100g'] / 100) * weight)
    
    item = {
        'name': tea['name'],
        'weight': weight,
        'price': price,
        'profit': profit
    }
    cart.setdefault(user_id, []).append(item)
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {weight}–≥ {tea['name']}")
    #user_data = {"name": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "address": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "delivery_type": "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", "username": callback.from_user.username}
    #save_order_to_excel(user_id, cart[user_id], user_data)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Excel (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    


@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ï–≤—Ä–æ–ø–æ—á—Ç–∞ +4—Ä", callback_data="delivery_euro")],
            [InlineKeyboardButton(text="–ë–µ–ª–ø–æ—á—Ç–∞ +3—Ä", callback_data="delivery_bel")],
            [InlineKeyboardButton(text="–°–¥–µ–∫", callback_data="delivery_sdek")]
        ])
    )
    await state.set_state(DeliveryInfo.choosing_delivery)

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart[user_id] = []
    await callback.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback.message.answer("üß∫ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

# –î–û–ë–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
# –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

@dp.message(DeliveryInfo.entering_data)
async def save_delivery_info(message: types.Message, state: FSMContext):
    print(f"=== –û–ë–†–ê–ë–û–¢–ß–ò–ö save_delivery_info –°–†–ê–ë–û–¢–ê–õ ===")
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    
    try:
        user_data = await state.get_data()
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")
        
        if "delivery" not in user_data:
            print("–û–®–ò–ë–ö–ê: delivery –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        delivery_type = user_data["delivery"]
        delivery_info = message.text.strip()
        user_id = message.from_user.id

        user_name = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        await state.update_data(buyerdata=delivery_info, username=user_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        file_name = "delivery_data.xlsx"
        
        print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª: {file_name}")
        
        if not os.path.exists(file_name):
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.append(["User ID", "Username", "–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", "–î–∞–Ω–Ω—ã–µ", "–í—Ä–µ–º—è", "–ó–∞–∫–∞–∑"])
            print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª Excel")
        else:
            wb = openpyxl.load_workbook(file_name)
            ws = wb.active
            print("–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª Excel")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        items = cart.get(user_id, [])
        if items:
            order_info = []
            for item in items:
                order_info.append(f"{item['name']} - {item['weight']}–≥ - {item['price']:.2f}‚ÇΩ")
            order_text = "\n".join(order_info)
            total_sum = sum(item['price'] for item in items)
            order_text += f"\n\n–ò—Ç–æ–≥–æ: {total_sum:.2f}‚ÇΩ"
        else:
            order_text = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"

        ws.append([user_id, user_name, delivery_type, delivery_info, now, order_text])
        wb.save(file_name)
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {user_id}, {user_name}, {delivery_type}, {delivery_info}, {now}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Excel!")

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        items = cart.get(user_id, [])
        total_sum = sum(item['price'] for item in items) if items else 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_total=total_sum)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="show_payment")]
        ])
        await message.answer(f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Å—É–º–º–∞: {total_sum:.2f}‚ÇΩ):", reply_markup=kb)

    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query(F.data.startswith("delivery_"))
async def handle_delivery_choice(callback: types.CallbackQuery, state: FSMContext):
    print(f"=== –û–ë–†–ê–ë–û–¢–ß–ò–ö handle_delivery_choice –°–†–ê–ë–û–¢–ê–õ ===")
    data = callback.data.replace("delivery_", "")
    delivery_text = {
        "euro": "–ï–≤—Ä–æ–ø–æ—á—Ç–∞",
        "bel": "–ë–µ–ª–ø–æ—á—Ç–∞",
        "sdek": "–°–î–≠–ö"
    }.get(data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    print(f"–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_text}")
    await state.update_data(delivery=delivery_text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {delivery_text}:\n\n"
        "üì¶ –§–ò–û\nüè° –ê–¥—Ä–µ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é\nüìÆ –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=kb
    )
    
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {DeliveryInfo.entering_data}")
    await state.set_state(DeliveryInfo.entering_data)
    await callback.answer()


@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = ReplyKeyboardBuilder()
    kb.add(types.KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"))
    kb.add(types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    kb.add(types.KeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"))
    if callback.from_user.id == ADMIN_ID:
        kb.add(types.KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    kb.adjust(2)
    
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup(resize_keyboard=True))
    await callback.answer()

@dp.callback_query(F.data == "show_payment")
async def show_payment_info(callback: types.CallbackQuery, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
    import random
    order_id = f"ORDER-{random.randint(10000, 99999)}"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    order_total = user_data.get("order_total", 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")]
    ])
    
    await callback.message.answer(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {order_id}</b>\n\n"
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>1234 5678 9012 3456</code>\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{order_total:.2f}‚ÇΩ</b>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data.get("order_id", "UNKNOWN")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π Excel
    user_id = callback.from_user.id
    items = cart.get(user_id, [])
    
    if items:
        save_order_to_excel(user_id, items, user_data)
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart[user_id] = []
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback.message.answer(
        f"üéâ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data.get('delivery', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã!",
        reply_markup=kb,
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()

@dp.message(AdminStates.waiting_for_broadcast_message)
async def handle_broadcast_message(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        admin_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–∫–∞–∑—ã")],
                [KeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Å–µ–º")],
                [KeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_kb)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success_count = 0
    error_count = 0
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
    
    if len(users) == 0:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        await state.clear()
        return
    
    await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id in users:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            if message.photo:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=message.caption or "",
                    parse_mode="HTML"
                )
            elif message.video:
                await bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=message.caption or "",
                    parse_mode="HTML"
                )
            elif message.document:
                await bot.send_document(
                    chat_id=user_id,
                    document=message.document.file_id,
                    caption=message.caption or "",
                    parse_mode="HTML"
                )
            else:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö
                text_content = message.text or ""
                await bot.send_message(
                    chat_id=user_id,
                    text=text_content,
                    parse_mode="HTML"
                )
            success_count += 1
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        except Exception as e:
            error_count += 1
            error_type = type(e).__name__
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_type} - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if "Forbidden" in str(e):
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            elif "Chat not found" in str(e):
                print(f"   –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            elif "User is deactivated" in str(e):
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    admin_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤—Å–µ–º")],
            [KeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=admin_kb
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



